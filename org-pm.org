* Utilities: Access to org elements and in-file projects
:PROPERTIES:
:ID:       12A162A2-B1DA-4C27-9613-DDF4B534AFAF
:eval-id:  2
:PM_PROJECTS: project1 testing-1-2-3
:END:
#+BEGIN_SRC emacs-lisp
  (defun org-pm-get-subtree-headline () (nth 4 (org-heading-components)))

  (defun org-pm-get-file-and-subtree-projects ()
    (delete-dups
     (append (org-pm-get-file-projects) (org-pm-get-subtree-projects))))

  (defun org-pm-get-file-projects ()
    (-select (lambda (x) (> (length x) 0))
             (split-string
              (or (org-get-option org-pm-registered-projects-property) "") " ")))

  (defun org-pm-get-subtree-projects ()
    (-select (lambda (x) (> (length x) 0))
             (split-string
              (or (org-entry-get (point) org-pm-registered-projects-property) "") " ")))

  (defun org-pm-get-project-attribute (project-name property &optional subtree-p)
    (let ((property-name ;; use function for DRY when setting/getting
           (org-pm-compose-project-attribute-name project-name property)))
     (if subtree-p
         (org-entry-get (point) property-name)
       (org-get-option property-name))))

  (defun org-pm-compose-project-attribute-name (project-name property)
    "Compose property or option name from PROJECT-NAME and PROPERTY.
  The code of this function is shorter than its name, but this function
  ensures that the attrubute name is always constructed in the same way."
    (concat "_" project-name "-" property))

  (defun org-pm-make-subdir-option (project-name)
    (org-pm-compose-project-attribute-name
     project-name org-pm-subdir-property-name))

  (defun org-get-option (option)
    (save-excursion
      (save-restriction
        (widen)
        (goto-char (point-min))
        (let ((found
               (re-search-forward (org-make-options-regexp (list option)) nil t)))
          (if found (match-string-no-properties 2) nil)))))

  (defun org-add-option-or-property (option value &optional subtree-p)
    "Add option or property value in buffer.
  This is a special case: Option or property items must be separated by spaces.
  See also org-set-option-or-property."
    (if subtree-p
        (org-add-property option value)
      (org-add-option option value)))

  (defun org-add-option (option value)
    (save-excursion
      (save-restriction
        (widen)
        (goto-char (point-min))
        (let* ((found
                (re-search-forward (org-make-options-regexp (list option)) nil t))
               (found-string (if found (match-string 2) "")))
          (if found
              (kill-whole-line)
            (goto-char (point-min)))
          (insert
           (concat
            "#+"
            option
            ": "
            (add-word-to-string-set value found-string)
            "\n"))))))

  (defun org-add-property (property value)
    (org-entry-put
     (point)
     property
     (add-word-to-string-set value (or (org-entry-get (point) property) ""))))

  (defun add-word-to-string-set (word string)
    (mapconcat
     (lambda (x) x)
     (delete-dups (cons word (split-string (or string "") " ")))
     " "))
#+END_SRC

* Creation and Deployment of Site on Server
:PROPERTIES:
:DATE:     <2015-03-31 Tue 10:47>
:END:

* Provide package org-pm
#+BEGIN_SRC emacs-lisp
(provide 'org-pm)
#+END_SRC
