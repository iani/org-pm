#+PM_PROJECTS: project1
*THIS IS WORK IN PROGRESS*

*PRE-ALPHA*

* org-pm

Publish org-mode files or sections to projects created GB reading specifications from a folder.
** Features / Principles

- Publish any Org-mode file or any section of it to any number of projects.
- Zero configuration: Start publishing any file or section to an existing or new project, without any previous configuration.
- Easy customization: Place html (header), org-mode options, css and JavaScript files in folder =includes=, and they are included in the project's definition automatically.
- Templates for creating projects with different custom styles.

** Installation, dependencies

=org-pm= can be obtained from GitHub at: https://github.com/iani/org-pm

The =el-get= recipe for =org-pm= is:

#+BEGIN_SRC elisp
(:name org-pm :url "http://github.com/iani/org-pm.git" :type git :features
       (org-pm)
       :after nil)
#+END_SRC

=org-pm= uses following packages:

1. =grizzl=
2. =dash=

** Directory structure
*** Project directory

Org-pm stores the configuration, source, and export files for all projects in a single directory.  The default location of this directory is =~/org-pm-projects=. Each sub-directory of this directory holds a project.

For example, the following directory structure defines two projects, =project1= and =project2=:

#+BEGIN_EXAMPLE
~/org-pm-projects
                 /project1
                 /project2
#+END_EXAMPLE

=org-pm= stores the =Org-mode= source files of the project in the projects' directory, under sub-directory =SOURCE=.  The exported files output by publishing the project are placed directly inside the top level of the project directory.  The project =SOURCE= directory is scanned recursively, and the directory structure of the source is preserved in the exported files directory structure.

Furthermore, each project directory may optionally contain the following sub-directories:
- Directory =includes= :: Contains =css= and =js= files that are included in the final project's pages through the standard header mechanism, and the =org= and =html= files used to configure the org-mode options of the project and provide headers and other html parts.
- Directory =DEPLOY= :: Contains shell scripts for deploying the site.

The project's html is exported inside the top level of the project folder.

#+BEGIN_EXAMPLE
~/org-pm-projects/project1
    sub-directory "includes":
          style.css        (contains the css style definition for the site)
          scripts.min.js   (contains js scripts for the site)
          OPTIONS.org      (contains the options for configuring export)
          HTML_HEAD.html   (contains the HTML_HEAD part for export)
    sub-directory "SOURCE:
          index.org        (the home page, created by publishing with org-pm)
    sub-directory "DEPLOY:
          github.sh        (shell script for deploying the site to github)
    index.html             (the home page, generated by org-pm-publish from index.org)
#+END_EXAMPLE

**** The =SOURCE= directory

=org-pm= places the org files that are used to create the project site inside the SOURCE folder.

*** Templates

The directory =TEMPLATES= in =org-pm= includes templates for customizing the style of a project.  The command =org-pm-make-project= offers a menu to select a template, in order to initialize the template of a new project or to change the template of an existing project.

A template is simply a folder of files that are copied to the =includes= folder of a project.

To add your own templates, create a folder where you will put the templates, and add this folder to the list in variable =org-pm-templates-dir=.  Include the wild-card for finding the folders (=/*=) in the path. For example:

#+BEGIN_SRC elisp
  (add-to-list 'org-pm-template-dirs "~/my-org-pm-templates/*")
#+END_SRC
